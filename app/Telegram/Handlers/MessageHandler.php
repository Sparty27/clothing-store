<?php

namespace App\Telegram\Handlers;

use App\Models\Order;
use App\Telegram\Commands\OrdersCommand;
use App\Telegram\Commands\StartCommand;
use App\Telegram\Dialogs\Dialog;
use App\Telegram\StateManager;
use Exception;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Keyboard\Keyboard;
use Telegram\Bot\Objects\Update;
use Telegram\Bot\Laravel\Facades\Telegram;

class MessageHandler
{
    public static function handle(Update $update)
    {
        $message = $update->getMessage();
        $text = $message->text;
        $chatId = $message->chat->id;

        if (str_starts_with($text, '/orders')) {
            self::handleOrdersCommand($chatId);
        }
    }

    public static function handleOrdersCommand(int $chatId, int $page = 1)
    {
        if (!self::isModerator($chatId)) {
            Log::info($chatId.' –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä');
            Telegram::sendMessage([
                'chat_id' => $chatId,
                'text' => '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!'
            ]);
            return;
        }

        Log::info($chatId.' –º–æ–¥–µ—Ä–∞—Ç–æ—Ä');

        $orders = Order::orderBy('created_at', 'desc')
            ->paginate(2, ['*'], 'page', $page);

        $responseText = self::formatOrdersPage($orders, $page);
        $keyboard = self::buildPaginationKeyboard($orders, $page);

        $lastMessageId = cache()->get("orders_msg_{$chatId}");

        if ($lastMessageId) {
            try {
                Telegram::editMessageText([
                    'chat_id' => $chatId,
                    'message_id' => $lastMessageId,
                    'text' => $responseText,
                    'parse_mode' => 'HTML',
                    'reply_markup' => $keyboard->isNotEmpty() ? $keyboard : Keyboard::remove()
                ]);
                return;
            } catch (\Exception $e) {
            }
        }

        $message = Telegram::sendMessage([
            'chat_id' => $chatId,
            'text' => $responseText,
            'parse_mode' => 'HTML',
            'reply_markup' => $keyboard->isNotEmpty() ? $keyboard : Keyboard::remove()
        ]);

        cache()->put("orders_msg_{$chatId}", $message->getMessageId(), now()->addDay());
    }

    public static function isModerator(int $chatId): bool
    {
        $moderators = config('telegram.moderators', []);
        return in_array($chatId, $moderators);
    }

    public static function formatOrdersPage($orders, int $page): string
    {
        if ($orders->isEmpty()) {
            return "–ù–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {$page} –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.";
        }
    
        $text = "<b>üìñ –°—Ç–æ—Ä—ñ–Ω–∫–∞ {$page}</b>\n\n";
        foreach ($orders as $order) {
            $text .= sprintf(
                "üÜî ID: %s\n"
                . "üë§ –ö–ª—ñ—î–Ω—Ç: %s %s\n"
                . "üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\n"
                . "üöö –î–æ—Å—Ç–∞–≤–∫–∞: %s\n"
                . "üì¶ –°—Ç–∞—Ç—É—Å: %s\n"
                . "üí≥ –û–ø–ª–∞—Ç–∞: %s (%s)\n"
                . "üè∑Ô∏è –¢–¢–ù: %s\n"
                . "üïí –°—Ç–≤–æ—Ä–µ–Ω–æ: %s\n\n",
                $order->id,
                $order->customer_name,
                $order->customer_last_name,
                $order->phone,
                $order->delivery_method,
                $order->status,
                $order->payment_method,
                $order->payment_status,
                $order->ttn ?? '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ',
                $order->created_at->format('d.m.Y H:i')
            );
        }
        return $text;
    }

    public static function buildPaginationKeyboard($orders, int $currentPage): Keyboard
    {
        $keyboard = Keyboard::make()->inline();
    
        $buttons = [];
    
        if ($currentPage > 1) {
            $buttons[] = Keyboard::inlineButton([
                'text' => '‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è',
                'callback_data' => 'orders_page_' . ($currentPage - 1)
            ]);
        }
    
        if ($orders->hasMorePages()) {
            $buttons[] = Keyboard::inlineButton([
                'text' => '–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è',
                'callback_data' => 'orders_page_' . ($currentPage + 1)
            ]);
        }
    
        if (!empty($buttons)) {
            $keyboard->row($buttons);
        }
    
        return $keyboard;
    }
}